source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
complete <- function(directory, id = 1:332) {
data <- data.frame()
files_full <- list.files(directory, full.names = TRUE)
for (i in id)
{
# 每隻 csv 開始搜，rbind 是搜每一行
# rbind 合併 row, 一直把抓到的資料 bind 到 data 去
#data <- rbind(data, read.csv(files_full[i]))
thisrow <- read.csv(files_full[i])
# 取單一一個 row 總和
# ‘is.na’, ‘na.omit’, ‘na.fail’, 'complete.cases' 是差不多的意思
nobs <- sum(complete.cases(thisrow))
# print(nobs)
tmp <- data.frame(i, nobs)
data <- rbind(data, tmp)
}
# 改變 column name
colnames(data) <- c("id", "nobs")
# 類似 return，這行一定要有
data
# 測試可先印前六行
# print(data)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
data <- data.frame()
files_full <- list.files(directory, full.names = TRUE)
for (i in id)
{
nobs <- sum(complete.cases(thisrow))
tmp <- data.frame(i, nobs)
data <- rbind(data, tmp)
}
colnames(data) <- c("id", "nobs")
data
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
data <- data.frame()
files_full <- list.files(directory, full.names = TRUE)
for (i in id)
{
thisrow <- read.csv(files_full[i])
nobs <- sum(complete.cases(thisrow))
tmp <- data.frame(i, nobs)
data <- rbind(data, tmp)
}
colnames(data) <- c("id", "nobs")
data
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit(manual=TRUE)
complete <- function(directory, id = 1:332) {
data <- data.frame()
Alllocation <- list.files(directory, full.names = TRUE)
for (i in id)
{
Selectedrow <- read.csv(Alllocation[i])
nobs <- sum(complete.cases(Selectedrow))
data2 <- data.frame(i, nobs)
data <- rbind(data, data2)
}
colnames(data) <- c("id", "nobs")
data
}
complete("specdata", c(2, 4, 8, 10, 12))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
corr <- function(directory, threshold = 0) {
files_full <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for (i in 1:length(files_full)) {
thisrow <- read.csv(files_full[i])
# thisrow$XXX 取某個 column 欄位
# 取總和，如果 (sulfate or nitrate 硫酸鹽或硝酸鹽) 都不是 NA
csum <- sum((!is.na(thisrow$sulfate)) & (!is.na(thisrow$nitrate)))
if (csum > threshold) {
tmp <- thisrow[which(!is.na(thisrow$sulfate)), ]
submoni_i <- tmp[which(!is.na(tmp$nitrate)), ]
data <- c(data, cor(submoni_i$sulfate, submoni_i$nitrate))
}
}
data
}
cr <- corr("specdata", 150)
head(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
install.paskages("swirl")
install.packages("swirl")
library(swirl)
library(swirl)
swril()
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
up arrow
(z*2+1999)
(z*2+1000)
(z*2+1000)
info()
z*2+1000
my_div
1
swirl()
getwd()
ls()
x<9
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
testdir<-dir.create()
testdir<-dir.create(old.dir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls
list.files()
file.exits("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3,R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(folder1,folder2)
file.path()
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink('testdir2')
unlink('testdir2',recursive=TRUE)
setwd()
old.dir<-setwd()
setwd(dir)
setwd(old.dir)
unlink('testdir',recursive=TRUE)
library(swirl)
swirl()
1:20
pi:10
15:1
:
:`
?:
?':'
seq(1,20)
seq(1,10,by=0.5)
seq(0.10,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq
)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("TX","heart attack")
best("TX", "heart failure")
best("BB", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death
## rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
rankhospital("TX", "heart failure", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages(“rJava”)
install.packages(“xlsxjars”)#安装xlsx的前提
install.packages(“xlsx”)
library(“xlsx”)
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library("xlsx")
Sys.setenv(JAVA_HOME=’C:/Program Files/Java/jdk1.8.0_66/jre’)
Sys.setenv(JAVA_HOME=’C:/Program Files/Java/jdk1.6.0_33/jre’)
Sys.setenv(JAVA_HOME=’C:/Program Files(x86)/Java/jdk1.8.0_66/jre’)
Sys.setenv(JAVA_HOME='C:/Program Files(x86)/Java/jdk1.8.0_66/jre')
library(rJava)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files(x86)\\Java\\jdk1.8.0_66\\jre')
library(rJava)
Sys.setenv(JAVA_HOME='C:\Program Files (x86)\Java\jre1.8.0_66\jre')
Sys.setenv(JAVA_HOME='C:Program Files (x86) Java jre1.8.0_66')
library(xlsx)
library(rJava)
install.packages("XML")
library(xlsx)
library(XML)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data<- xlmTreeParse(file=url,useInternal=TRUE)
data<- xmlTreeParse(file=url,useInternal=TRUE)
library(XML)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
data23<-xmlTreeParse(file=url,useinternal=TRUE)
library(XML)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
data23<-xmlTreeParse(url,useinternal=TRUE)
library(XML)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
data23<-xmlTreeParse(url,useInternalNodes = TRUE)
library(XML)
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc<- xmlTreeParse(url, useInternalNodes = TRUE )
rootNode <- xmlRoot(doc)
library(XML)
fileurl<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc<- xmlTreeParse(fileurl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
library(XML)
fileurl<- "d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc<- xmlTreeParse(fileurl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
library(XML)
fileurl<- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<- xmlTreeParse(fileurl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
library(XML)
fileurl<- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<- xmlTreeParse(fileurl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
library(XML)
fileurl<- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<- xmlTreeParse(fileurl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
sum(xpathSApply(rootNode, "//zipcode", `xmlValue == '21231'))
library(XML)
fileurl<- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<- xmlTreeParse(fileurl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
sum(xpathSApply(rootNode, "//zipcode", xmlValue == '21231'))
sum(xpathSApply(rootNode, "//zipcode", xmlValue) == '21231')
setwd("C:/Users/wangy_000/Desktop/coursera/4-1")
householdFile<-"household_power_consumption.txt"
householdFile
hist(householdFile$Global_active_power,col="red",main="Global Active Power", xlab="Global Active Power(kilowatts)")
householdFile<-"household_power_consumption.txt"
plotData <- read.table(householdFile, header=T, sep=";", na.strings="?")
## set time variable
finalData <- plotData[plotData$Date %in% c("1/2/2007","2/2/2007"),]
SetTime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(SetTime, finalData)
##
## Generating Plot 1
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
householdFile<-"household_power_consumption.txt"
plotData <- read.table(householdFile, header=T, sep=";", na.strings="?")
## set time variable
finalData <- plotData[plotData$Date %in% c("1/2/2007","2/2/2007"),]
SetTime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(SetTime, finalData)
##
## Generating Plot 1
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
columnlines <- c("black", "red", "blue")
labels <- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(finalData$SetTime, finalData$Sub_metering_1, type="l", col=columnlines[1], xlab="", ylab="Energy sub metering")
lines(finalData$SetTime, finalData$Sub_metering_2, col=columnlines[2])
lines(finalData$SetTime, finalData$Sub_metering_3, col=columnlines[3])
legend("topright", legend=labels, col=columnlines, lty="solid")
labels <- c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
columnlines <- c("black","red","blue")
par(mfrow=c(2,2))
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="green", xlab="", ylab="Global Active Power")
plot(finalData$SetTime, finalData$Voltage, type="l", col="orange", xlab="datetime", ylab="Voltage")
plot(finalData$SetTime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$SetTime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$SetTime, finalData$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", legend=labels, lty=1, col=columnlines)
plot(finalData$SetTime, finalData$Global_reactive_power, type="l", col="blue", xlab="datetime", ylab="Global_reactive_power")
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
labels <- c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
columnlines <- c("black","red","blue")
par(mfrow=c(2,2))
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power")
plot(finalData$SetTime, finalData$Voltage, type="l", col="black", xlab="datetime", ylab="Voltage")
plot(finalData$SetTime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$SetTime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$SetTime, finalData$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", legend=labels, lty=1, col=columnlines)
plot(finalData$SetTime, finalData$Global_reactive_power, type="l", col="blue", xlab="datetime", ylab="Global_reactive_power")
labels <- c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
columnlines <- c("black","red","blue")
par(mfrow=c(2,2))
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power")
plot(finalData$SetTime, finalData$Voltage, type="l", col="black", xlab="datetime", ylab="Voltage")
plot(finalData$SetTime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$SetTime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$SetTime, finalData$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", legend=labels, lty=1, col=columnlines)
plot(finalData$SetTime, finalData$Global_reactive_power, type="l", col="black", xlab="datetime", ylab="Global_reactive_power")
labels <- c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
columnlines <- c("black","red","blue")
par(mfrow=c(2,2))
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power")
plot(finalData$SetTime, finalData$Voltage, type="l", col="black", xlab="datetime", ylab="Voltage")
plot(finalData$SetTime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$SetTime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$SetTime, finalData$Sub_metering_3, type="l", col="blue")
plot(finalData$SetTime, finalData$Global_reactive_power, type="l", col="black", xlab="datetime", ylab="Global_reactive_power")
labels <- c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
columnlines <- c("black","red","blue")
par(mfrow=c(2,2))
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power")
plot(finalData$SetTime, finalData$Voltage, type="l", col="black", xlab="datetime", ylab="Voltage")
plot(finalData$SetTime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$SetTime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$SetTime, finalData$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", legend=labels, lty=1, col=columnlines)
plot(finalData$SetTime, finalData$Global_reactive_power, type="l", col="black", xlab="datetime", ylab="Global_reactive_power")
householdFile<-"household_power_consumption.txt"
plotData <- read.table(householdFile, header=T, sep=";", na.strings="?")
## set time variable
finalData <- plotData[plotData$Date %in% c("1/2/2007","2/2/2007"),]
SetTime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(SetTime, finalData)
##
## Plot 1
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
## Generating Plot 2
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
householdFile<-"household_power_consumption.txt"
plotData <- read.table(householdFile, header=T, sep=";", na.strings="?")
## set time variable
finalData <- plotData[plotData$Date %in% c("1/2/2007","2/2/2007"),]
SetTime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(SetTime, finalData)
##
## Plot 1
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
## Generating Plot 2
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
